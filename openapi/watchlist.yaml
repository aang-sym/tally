openapi: 3.1.0
info:
  title: Watchlist API
  version: 0.1.0
  description: |
    Watchlist and show tracking endpoints including progress, status, notes, provider, and per-show settings.

servers:
  - url: http://localhost:4000
    description: Local dev

security:
  - bearerAuth: []

paths:
  /api/watchlist:
    get:
      summary: Get user's watchlist
      description: |
        Returns the user's watchlist with normalized show details and selected streaming provider.
        Optional `status` query filters by watchlist status.
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [watchlist, watching, completed, dropped, all]
            default: all
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/WatchlistListResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

    post:
      summary: Add a show to the user's watchlist
      description: |
        Adds a show (by TMDB ID) to the user's watchlist; status defaults to `watchlist`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tmdbId]
              properties:
                tmdbId: { type: integer }
                status:
                  type: string
                  enum: [watchlist, watching]
                  default: watchlist
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AddWatchlistResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/stats:
    get:
      summary: Get user's watchlist statistics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/WatchlistStatsResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{id}/status:
    put:
      summary: Update a show's status
      parameters:
        - $ref: "#/components/parameters/UserShowIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [watchlist, watching, completed, dropped]
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserShowStatusResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{id}/rating:
    put:
      summary: Rate a show
      parameters:
        - $ref: "#/components/parameters/UserShowIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating]
              properties:
                rating:
                  type: number
                  minimum: 0
                  maximum: 10
                  multipleOf: 0.5
      responses:
        "200":
          description: Rated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/RateShowResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{id}/notes:
    put:
      summary: Update show notes
      parameters:
        - $ref: "#/components/parameters/UserShowIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [notes]
              properties:
                notes: { type: string }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UpdateNotesResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{id}/provider:
    put:
      summary: Update selected streaming provider for the user's show
      description: |
        Set or clear (`null`) the provider. Expects `{ id, name, logo_path }` when not null.
      parameters:
        - $ref: "#/components/parameters/UserShowIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [provider]
              properties:
                provider:
                  oneOf:
                    - $ref: "#/components/schemas/SelectedProvider"
                    - type: "null"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UpdateProviderResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{id}/country:
    put:
      summary: Update per-show country override
      description: |
        Set a per-show `countryCode` (e.g., AU) or clear it with `null`.
      parameters:
        - $ref: "#/components/parameters/UserShowIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [countryCode]
              properties:
                countryCode:
                  oneOf:
                    - { type: string, minLength: 2, maxLength: 2 }
                    - { type: "null" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UpdateCountryResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{id}/buffer:
    put:
      summary: Update buffer days for a show
      parameters:
        - $ref: "#/components/parameters/UserShowIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [bufferDays]
              properties:
                bufferDays:
                  type: number
                  minimum: 0
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UpdateBufferResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{id}:
    delete:
      summary: Remove show from watchlist
      parameters:
        - $ref: "#/components/parameters/UserShowIdParam"
      responses:
        "200":
          description: Removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      message: { type: string, example: "Show removed from watchlist" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/watching:
    get:
      summary: List currently watching shows
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/WatchingListResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/watching/{showId}:
    get:
      summary: Get detailed progress for a specific show (by internal show id)
      parameters:
        - name: showId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ShowProgressDetailResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/search-and-add:
    post:
      summary: Search TMDB and add a show in one request
      operationId: watchlistSearchAndAdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
                tmdbId: { type: integer }
                status:
                  type: string
                  enum: [watchlist, watching]
                  default: watchlist
              oneOf:
                - required: [query]
                - required: [tmdbId]
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: object
                    properties:
                      userShow: { $ref: "#/components/schemas/UserShow" }
                      message: { type: string }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

  /api/watchlist/{tmdbId}/progress:
    get:
      summary: Get user's episode progress for a show (by TMDB ID)
      parameters:
        - name: tmdbId
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ShowProgressMapResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

    put:
      summary: Set episode progress up to an episode (inclusive) for a show (by TMDB ID)
      description: |
        Sets progress for all episodes up to (and including) the specified episode.
      parameters:
        - name: tmdbId
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [seasonNumber, episodeNumber, status]
              properties:
                seasonNumber: { type: integer }
                episodeNumber: { type: integer }
                status:
                  type: string
                  enum: [watched, unwatched, watching]
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProgressUpdateResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/ServerError" }

components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }

  parameters:
    UserShowIdParam:
      name: id
      in: path
      required: true
      description: User show id (UUID)
      schema: { type: string, format: uuid }

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    NotFound:
      description: Not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    ServerError:
      description: Server error
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }

  schemas:
    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        error: { type: string }
        details: { type: string, nullable: true }

    SelectedProvider:
      type: object
      required: [id, name, logo_path]
      properties:
        id: { type: integer, description: "TMDB provider id" }
        name: { type: string }
        logo_path: { type: string }

    ShowSummary:
      type: object
      description: Normalized show object from DB + poster URL normalization
      properties:
        id: { type: string, format: uuid }
        tmdb_id: { type: integer }
        title: { type: string }
        overview: { type: string, nullable: true }
        poster_path: { type: string, nullable: true }
        first_air_date: { type: string, format: date, nullable: true }
        last_air_date: { type: string, format: date, nullable: true }
        status: { type: string, nullable: true }
        total_seasons: { type: integer, nullable: true }
        total_episodes: { type: integer, nullable: true }

    UserShow:
      type: object
      properties:
        id: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        show_id: { type: string, format: uuid }
        status: { type: string, enum: [watchlist, watching, completed, dropped] }
        added_at: { type: string, format: date-time, nullable: true }
        started_watching_at: { type: string, format: date-time, nullable: true }
        completed_at: { type: string, format: date-time, nullable: true }
        last_episode_watched_id: { type: string, format: uuid, nullable: true }
        show_rating: { type: number, nullable: true }
        notes: { type: string, nullable: true }
        buffer_days: { type: integer }
        selected_service_id: { type: string, format: uuid, nullable: true }
        country_code: { type: string, minLength: 2, maxLength: 2, nullable: true }

    WatchlistRow:
      type: object
      properties:
        id: { type: string, format: uuid }
        status: { type: string, enum: [watchlist, watching, completed, dropped] }
        show: { $ref: "#/components/schemas/ShowSummary" }
        streaming_provider:
          oneOf:
            - $ref: "#/components/schemas/SelectedProvider"
            - { type: "null" }

    WatchlistListResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            shows:
              type: array
              items: { $ref: "#/components/schemas/WatchlistRow" }
            totalCount: { type: integer }
            statusFilter: { type: string }

    AddWatchlistResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            userShow: { $ref: "#/components/schemas/UserShow" }
            show:
              allOf:
                - $ref: "#/components/schemas/ShowSummary"
            availability:
              type: array
              items:
                type: object
                properties:
                  country_code: { type: string }
                  service_id: { type: string, format: uuid }
                  availability_type: { type: string }
                  price_amount: { type: number, nullable: true }
                  price_currency: { type: string, nullable: true }
                  deep_link: { type: string, nullable: true }
            message: { type: string }

    WatchlistStatsResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          description: Implementation-defined stats from WatchlistService.getUserWatchlistStats
          additionalProperties: true

    UserShowStatusResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            userShow: { $ref: "#/components/schemas/UserShow" }
            message: { type: string }

    RateShowResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            rating: { type: number }
            message: { type: string }

    UpdateNotesResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            notes: { type: string }
            message: { type: string }

    UpdateProviderResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            provider:
              oneOf:
                - $ref: "#/components/schemas/SelectedProvider"
                - { type: "null" }
            message: { type: string }

    UpdateCountryResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            countryCode:
              oneOf:
                - { type: string }
                - { type: "null" }
            message: { type: string }

    UpdateBufferResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            bufferDays: { type: integer }
            message: { type: string }

    WatchingListResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            shows:
              type: array
              items:
                # service returns raw rows here; keep flexible
                anyOf:
                  - $ref: "#/components/schemas/WatchlistRow"
                  - { type: object, additionalProperties: true }
            totalCount: { type: integer }

    ShowProgressDetailResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            show: { $ref: "#/components/schemas/ShowSummary" }
            seasons:
              type: array
              items:
                type: object
                properties:
                  season_number: { type: integer }
                  episodes:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, format: uuid }
                        episode_number: { type: integer }
            progress:
              type: object
              additionalProperties: true
            totalEpisodes: { type: integer }
            watchedEpisodes: { type: integer }
            completionPercentage: { type: integer }

    ShowProgressMapResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            seasons:
              type: object
              additionalProperties:
                type: array
                items:
                  type: object
                  properties:
                    episodeNumber: { type: integer }
                    status: { type: string }

    ProgressUpdateResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            updatedCount: { type: integer }
            totalRequested: { type: integer }
            status: { type: string, enum: [watched, unwatched, watching] }
            message: { type: string }