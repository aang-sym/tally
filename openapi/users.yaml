# openapi/users.yaml
paths:
  /api/users/signup:
    post:
      summary: Sign up
      operationId: usersSignup
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400': { description: Bad Request }
        '409': { description: Conflict }

  /api/users/login:
    post:
      summary: Log in
      operationId: usersLogin
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401': { description: Unauthorized }

  /api/users:
    get:
      summary: List users (admin/test)
      operationId: usersList
      tags: [Users]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items: { $ref: '#/components/schemas/UserProfile' }

  /api/users/{id}/profile:
    get:
      summary: Get user profile
      operationId: usersGetProfile
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404': { description: Not Found }

  /api/users/{id}:
    patch:
      summary: Update user (partial)
      operationId: usersUpdate
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400': { description: Bad Request }
        '404': { description: Not Found }

components:
  schemas:
    SignUpRequest:
      type: object
      required: [email, password, display_name]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        display_name: { type: string }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    LoginResponse:
      type: object
      properties:
        success: { type: boolean }
        token: { type: string }
        user:
          $ref: '#/components/schemas/UserProfile'

    UserUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        display_name: { type: string }
        avatar_url: { type: string, nullable: true }
        country_code: { type: string, nullable: true }

    UserProfileResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      required: [id, email, display_name]
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        display_name: { type: string }
        avatar_url: { type: string, nullable: true }
        country_code: { type: string, nullable: true }