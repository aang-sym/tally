/* tslint:disable */
/* eslint-disable */
/**
 * Tally API
 * Minimal OpenAPI surface for watchlist v2. Expand with real schemas per route as we iterate.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Provider,
  SetProviderRequest,
  UserShowCard,
} from '../models/index';
import {
    ProviderFromJSON,
    ProviderToJSON,
    SetProviderRequestFromJSON,
    SetProviderRequestToJSON,
    UserShowCardFromJSON,
    UserShowCardToJSON,
} from '../models/index';

export interface ApiWatchlistGetRequest {
    country?: string;
}

export interface ApiWatchlistUserShowIdProviderPutRequest {
    userShowId: string;
    setProviderRequest: SetProviderRequest;
}

/**
 * WatchlistApi - interface
 * 
 * @export
 * @interface WatchlistApiInterface
 */
export interface WatchlistApiInterface {
    /**
     * 
     * @summary List user shows with progress
     * @param {string} [country] ISO country code (e.g., AU) used for availability/provider context.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApiInterface
     */
    apiWatchlistGetRaw(requestParameters: ApiWatchlistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserShowCard>>>;

    /**
     * List user shows with progress
     */
    apiWatchlistGet(requestParameters: ApiWatchlistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserShowCard>>;

    /**
     * 
     * @summary Set selected streaming provider for a user_show
     * @param {string} userShowId 
     * @param {SetProviderRequest} setProviderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WatchlistApiInterface
     */
    apiWatchlistUserShowIdProviderPutRaw(requestParameters: ApiWatchlistUserShowIdProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>>;

    /**
     * Set selected streaming provider for a user_show
     */
    apiWatchlistUserShowIdProviderPut(requestParameters: ApiWatchlistUserShowIdProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider>;

}

/**
 * 
 */
export class WatchlistApi extends runtime.BaseAPI implements WatchlistApiInterface {

    /**
     * List user shows with progress
     */
    async apiWatchlistGetRaw(requestParameters: ApiWatchlistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserShowCard>>> {
        const queryParameters: any = {};

        if (requestParameters['country'] != null) {
            queryParameters['country'] = requestParameters['country'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/watchlist`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserShowCardFromJSON));
    }

    /**
     * List user shows with progress
     */
    async apiWatchlistGet(requestParameters: ApiWatchlistGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserShowCard>> {
        const response = await this.apiWatchlistGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set selected streaming provider for a user_show
     */
    async apiWatchlistUserShowIdProviderPutRaw(requestParameters: ApiWatchlistUserShowIdProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['userShowId'] == null) {
            throw new runtime.RequiredError(
                'userShowId',
                'Required parameter "userShowId" was null or undefined when calling apiWatchlistUserShowIdProviderPut().'
            );
        }

        if (requestParameters['setProviderRequest'] == null) {
            throw new runtime.RequiredError(
                'setProviderRequest',
                'Required parameter "setProviderRequest" was null or undefined when calling apiWatchlistUserShowIdProviderPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/watchlist/:userShowId/provider`;
        urlPath = urlPath.replace(`{${"userShowId"}}`, encodeURIComponent(String(requestParameters['userShowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetProviderRequestToJSON(requestParameters['setProviderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Set selected streaming provider for a user_show
     */
    async apiWatchlistUserShowIdProviderPut(requestParameters: ApiWatchlistUserShowIdProviderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.apiWatchlistUserShowIdProviderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
