#!/usr/bin/env tsx
/**
 * Step 2 Validation Script
 * Tests the regenerated API client and OpenAPI security implementation
 */

// Using Node.js built-in fetch (available in Node 18+)

const API_BASE = 'http://localhost:4000';

// Test tokens (using JWT generated by generate-test-token.js)
const VALID_TOKEN =
  'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiMzY4Njk3My1iYTYwLTQ0MDUtODUyNS1mOGQ2YjNkY2I3ZmMiLCJ1c2VySWQiOiJiMzY4Njk3My1iYTYwLTQ0MDUtODUyNS1mOGQ2YjNkY2I3ZmMiLCJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJkaXNwbGF5TmFtZSI6IlRlc3QgVXNlciIsImF1ZCI6ImF1dGhlbnRpY2F0ZWQiLCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImlhdCI6MTc1NzU5Nzk4MywiZXhwIjoxNzU3Njg0MzgzfQ.OIfUlzVVc21XMSpwbWuMZRl6PDvsuoRVD0WcGML7Ndg';
const INVALID_TOKEN = 'Bearer invalid-token-format';

interface TestResult {
  endpoint: string;
  method: string;
  hasAuth: boolean;
  expectedStatus: number;
  actualStatus: number;
  success: boolean;
  responseData?: any;
  error?: string;
}

const results: TestResult[] = [];

async function testEndpoint(
  endpoint: string,
  method: 'GET' | 'POST' | 'PUT' | 'DELETE',
  token?: string,
  expectedStatus: number = 200,
  data?: any
): Promise<TestResult> {
  const url = `${API_BASE}${endpoint}`;
  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
  };

  if (token) {
    headers.Authorization = token;
  }

  try {
    const init: RequestInit = {
      method,
      headers,
    };
    if (data !== undefined) {
      init.body = JSON.stringify(data);
    } else {
      init.body = null;
    }

    const response = await fetch(url, init);

    let responseData;
    try {
      responseData = await response.json();
    } catch {
      responseData = await response.text();
    }

    const result: TestResult = {
      endpoint,
      method,
      hasAuth: !!token,
      expectedStatus,
      actualStatus: response.status,
      success: response.status === expectedStatus,
      responseData,
    };

    return result;
  } catch (error: any) {
    return {
      endpoint,
      method,
      hasAuth: !!token,
      expectedStatus,
      actualStatus: 0,
      success: false,
      error: error.message,
    };
  }
}

async function runValidationTests() {
  console.log('üß™ Step 2 Validation: Testing OpenAPI Security Implementation\n');

  // Test 1: Public endpoint (should work without auth)
  console.log('1Ô∏è‚É£  Testing public endpoint: GET /api/health');
  results.push(await testEndpoint('/api/health', 'GET', undefined, 200));

  // Test 2: Public endpoint with auth (should still work)
  console.log('2Ô∏è‚É£  Testing public endpoint with auth: GET /api/health');
  results.push(await testEndpoint('/api/health', 'GET', VALID_TOKEN, 200));

  // Test 3: Protected endpoint without auth (should return 401/403)
  console.log('3Ô∏è‚É£  Testing protected endpoint without auth: GET /api/watchlist');
  results.push(await testEndpoint('/api/watchlist', 'GET', undefined, 401));

  // Test 4: Protected endpoint with invalid auth (should return 401/403)
  console.log('4Ô∏è‚É£  Testing protected endpoint with invalid token: GET /api/watchlist');
  results.push(await testEndpoint('/api/watchlist', 'GET', INVALID_TOKEN, 401));

  // Test 5: Protected endpoint with valid auth (should work)
  console.log('5Ô∏è‚É£  Testing protected endpoint with valid token: GET /api/watchlist');
  results.push(await testEndpoint('/api/watchlist', 'GET', VALID_TOKEN, 200));

  // Test 6: Stats endpoint without auth (should return 401/403)
  console.log('6Ô∏è‚É£  Testing stats endpoint without auth: GET /api/watchlist/stats');
  results.push(await testEndpoint('/api/watchlist/stats', 'GET', undefined, 401));

  // Test 7: Stats endpoint with valid auth (should work)
  console.log('7Ô∏è‚É£  Testing stats endpoint with valid token: GET /api/watchlist/stats');
  results.push(await testEndpoint('/api/watchlist/stats', 'GET', VALID_TOKEN, 200));

  // Display results
  console.log('\nüìä Test Results Summary:');
  console.log('========================');

  let passCount = 0;
  let failCount = 0;

  results.forEach((result, index) => {
    const icon = result.success ? '‚úÖ' : '‚ùå';
    const authStatus = result.hasAuth ? 'WITH AUTH' : 'NO AUTH';

    console.log(`${icon} Test ${index + 1}: ${result.method} ${result.endpoint} (${authStatus})`);
    console.log(`   Expected: ${result.expectedStatus}, Got: ${result.actualStatus}`);

    if (!result.success) {
      console.log(`   Error: ${result.error || 'Status mismatch'}`);
      failCount++;
    } else {
      passCount++;
    }
    console.log('');
  });

  console.log(`üéØ Overall Results: ${passCount}/${results.length} tests passed`);

  if (failCount === 0) {
    console.log('üéâ All tests passed! OpenAPI security implementation is working correctly.');
  } else {
    console.log(`‚ö†Ô∏è  ${failCount} test(s) failed. Security implementation needs review.`);
  }

  return { passCount, failCount, results };
}

// Run tests directly
runValidationTests().catch(console.error);

export { runValidationTests, TestResult };
