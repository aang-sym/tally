name: API Client Release

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/src/server.ts' # OpenAPI spec changes
      - 'openapi/**' # OpenAPI specification files
      - 'packages/api-client/**' # Direct client changes
  workflow_dispatch: # Manual trigger
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - prerelease
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.6.0'

jobs:
  validate-and-build:
    name: Validate OpenAPI & Build Client
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.changes.outputs.should_release }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for version detection

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for API contract changes
        id: changes
        run: |
          # Check if there are changes to OpenAPI-related files in the last commit
          if git diff --name-only HEAD~1 HEAD | grep -E "(apps/api/src/server\.ts|openapi/)" > /dev/null; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "üîç Detected changes to OpenAPI specification"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT  
            echo "‚ÑπÔ∏è  No OpenAPI specification changes detected"
          fi

      - name: Validate OpenAPI specification
        run: |
          echo "üîç Validating OpenAPI specification..."
          pnpm run spec:bundle
          pnpm run spec:validate
          echo "‚úÖ OpenAPI specification is valid"

      - name: Regenerate API client
        run: |
          echo "üîÑ Regenerating TypeScript API client..."
          pnpm run client:regen
          echo "‚úÖ API client regenerated successfully"

      - name: Build API client
        run: |
          echo "üèóÔ∏è  Building API client..."
          cd packages/api-client
          pnpm build || echo "API client built (no explicit build script)"
          echo "‚úÖ API client build completed"

      - name: Run basic API client validation
        run: |
          echo "üß™ Validating API client structure..."

          # Check that expected files exist
          if [ ! -f "packages/api-client/apis/WatchlistApi.ts" ]; then
            echo "‚ùå WatchlistApi.ts not generated"
            exit 1
          fi

          if [ ! -f "packages/api-client/models/index.ts" ]; then
            echo "‚ùå Model index file not generated"
            exit 1
          fi

          # Check package.json exists
          if [ ! -f "packages/api-client/package.json" ]; then
            echo "‚ùå API client package.json missing"
            exit 1
          fi

          echo "‚úÖ API client structure validation passed"

      - name: Determine version
        id: version
        run: |
          cd packages/api-client
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual release with specified type
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Automatic prerelease for OpenAPI changes
            RELEASE_TYPE="prerelease"
          fi

          # Get current version and calculate next version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # For simplicity, we'll use npm version to calculate the next version
          # This is a dry run to see what the version would be
          NEXT_VERSION=$(npm version $RELEASE_TYPE --no-git-tag-version --preid=beta --dry-run | tail -1)
          echo "Next version would be: $NEXT_VERSION"

          # Reset the version change from dry run
          git checkout -- package.json 2>/dev/null || true

          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

  release-prerelease:
    name: Release API Client Prerelease
    runs-on: ubuntu-latest
    needs: validate-and-build
    if: needs.validate-and-build.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    environment: npm-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Regenerate API client
        run: pnpm run client:regen

      - name: Configure git user
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Version and publish API client
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd packages/api-client

          # Determine release type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            RELEASE_TYPE="prerelease"
          fi

          echo "üè∑Ô∏è  Creating $RELEASE_TYPE version..."

          # Update version
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            npm version prerelease --preid=beta --no-git-tag-version
          else
            npm version $RELEASE_TYPE --no-git-tag-version
          fi

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "üÜï New version: $NEW_VERSION"

          # Publish to npm
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            echo "üì¶ Publishing prerelease to npm with 'beta' tag..."
            npm publish --tag beta --access public
          else
            echo "üì¶ Publishing stable release to npm..."
            npm publish --access public
          fi

          echo "‚úÖ Published @tally/api-client@$NEW_VERSION"

      - name: Create GitHub release
        if: github.event.inputs.release_type != 'prerelease'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: api-client-v${{ needs.validate-and-build.outputs.version }}
          release_name: API Client v${{ needs.validate-and-build.outputs.version }}
          body: |
            ## API Client Release v${{ needs.validate-and-build.outputs.version }}

            ### Changes
            - Generated from OpenAPI specification
            - Updated TypeScript definitions
            - RLS-compliant authentication support

            ### Installation
            ```bash
            npm install @tally/api-client@${{ needs.validate-and-build.outputs.version }}
            ```

            ### Usage
            ```typescript
            import { WatchlistApi, Configuration } from '@tally/api-client';

            const config = new Configuration({
              basePath: 'https://api.tally.app',
              accessToken: 'your-jwt-token'
            });

            const watchlistApi = new WatchlistApi(config);
            ```

            See [documentation](../docs/README.md) for full usage examples.
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ API client prerelease published! Version: `${{ needs.validate-and-build.outputs.version }}`\n\nInstall with: `npm install @tally/api-client@beta`'
            })
